{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","role","htmlFor","Textform","text","setText","useState","isTextEmpty","trim","Fragment","style","color","heading","value","backgroundColor","onChange","event","console","log","target","rows","HandleUpClick","newtext","toUpperCase","showalert","HandleUplow","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","class","msg","App","setmode","setalert","message","setTimeout","document","body","setInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e2318e38.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    // <nav classNameName={`navbar navbar-expand-lg-${props.mode} bg-${props.mode}`}>\r\n    // <div classNameName=\"container-fluid\">\r\n    //   <a classNameName=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    //   <button classNameName=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    //    <span classNameName=\"navbar-toggler-icon\"></span>\r\n    //   </button>\r\n    //   <div classNameName=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    //     <ul classNameName=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n    //       <li classNameName=\"nav-item\">\r\n    //         <a classNameName=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n    //       </li>\r\n    //       <li classNameName=\"nav-item\">\r\n    //         <a classNameName=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n    //         </li>\r\n\r\n    //     </ul>\r\n    //     <form classNameName=\"d-flex\" role=\"search\">\r\n    //       <input classNameName=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n    //       <button classNameName=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n    //     </form>\r\n    //   </div>\r\n    // </div>\r\n    // </nav>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.togglemode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Add title here\",\r\n  aboutText: \"Add text here\"\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const HandleUpClick = () => {\r\n        console.log(\"HandleUp is clicked\" + text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showalert(\"Converted to UpperCase\",\"success\");\r\n    }\r\n\r\n    const HandleUplow = () => {\r\n        console.log(\"HandleUp is clicked\" + text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showalert(\"Converted to LowerCase\",\"success\");\r\n    }\r\n\r\n    const HandleChangeClicked = (event) => {\r\n        console.log(\"HandleChange is clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('Enter Text Here');\r\n\r\n    const isTextEmpty = text.trim() === '';\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='container' style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} style={{backgroundColor:props.mode==='dark'?'#090626':'white',color:props.mode==='dark'?'white':'black'}} onChange={HandleChangeClicked} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={HandleUpClick} >Convert To UpperCase</button>\r\n\r\n                <button className=\"btn btn-primary mx-3\" onClick={HandleUplow} >Convert To LowerCase</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}} >\r\n                <h2>Your Text Summary</h2>\r\n                {isTextEmpty ? (\r\n                    <p>No words and 0 characters</p>\r\n                ) : (\r\n                    <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`}>\r\n            <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport Alert from './Components/Alert';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App(props) {\n  const [mode, setmode] = useState('light')\n  const [alert, setalert] = useState(null)\n\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n  const togglemode = () => {\n    if (mode === 'dark') {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showalert(\"Light Mode has enabled\", \"success\");\n      document.title = 'TextWeb-lightMode'\n      setInterval(() => {\n        document.title = 'TextWeb-is amazing website'\n      }, 2000);\n      setInterval(() => {\n        document.title = 'TextWeb-is install Now'\n      }, 1500);\n    }\n    else {\n      setmode('dark');\n      document.body.style.backgroundColor = '#090626';\n      showalert(\"Dark Mode has enabled\", \"success\");\n      document.title = 'TextWeb-DarkMode'\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextWeb\" aboutText=\"About\" mode={mode} togglemode={togglemode} />\n        <Alert alert={alert} />\n        {/* <Navbar/> */}\n        <div className=\"container\">\n          {/* <Routes> */}\n            {/* <Route path=\"/about\" element={<About />}>\n            </Route> */}\n            {/* <Route path=\"/\" element={<Textform showalert={showalert} heading=\"Analyze The Text Area\" mode={mode} />}>  */}\n            <Textform showalert={showalert} heading=\"Analyze The Text Area\" mode={mode}/>    \n            {/* </Route> */}\n          {/* </Routes> */}\n          {/* <About /> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}